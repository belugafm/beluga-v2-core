
# SSRサーバーのIPアドレスとポート
# 複数のサーバーを使っている場合は全部ここに書く
upstream ssr_servers {
    least_conn; # ロードバランサ
    server 127.0.0.1:3000;
}
# APIサーバーのIPアドレスとポート
upstream api_server {
    server 127.0.0.1:8080;
}
# Websocketサーバー
upstream websocket_server {
    server 127.0.0.1:6000;
}
# HTTPをHTTPSにリダイレクトする場合は以下をコメントアウト
# server {
#     listen 80;
#     server_name beluga.cx;
#     return 301 https://$host$request_uri;
# }


server {
    listen 80;
    # listen 443 ssl;
    # ssl_certificate     /etc/letsencrypt/live/beluga.cx/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/beluga.cx/privkey.pem;

    server_name localhost.beluga.fm;
    # server_name beluga.cx;
    server_tokens off;
    root /path/to/root;

    gzip on;
    gzip_vary on;
    gzip_types text/css text/javascript application/json application/javascript;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    location ~ .+\.(css|mp3|png|jpg|jpeg|svg|ttf|otf|gif|ico)$ {
        add_header "X-Powered-By" "nginx";
        add_header "X-Nginx-Cache" $upstream_cache_status;
        expires 30d;
        proxy_ignore_headers Cache-Control;
        proxy_cache nextjs;
        proxy_cache_valid 200 302 24h;
        access_log off;
        proxy_pass http://ssr_servers;
        proxy_http_version 1.1;
    }

    # API
    location ~ ^/api/ {
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin $server_name;
            add_header Access-Control-Allow-Methods "GET, POST";
            add_header Access-Control-Allow-Headers "Origin, Authorization, Accept, Content-Type";
            add_header Access-Control-Max-Age 3600;
            add_header Content-Type "text/plain charset=UTF-8";
            add_header Content-Length 0;
            return 204;
        }
        if ($http_x_requested_with != XMLHttpRequest) {
            return 403;
        }

        add_header Cache-Control "no-store, no-cache, must-revalidate, max-age=0";
        add_header Pragma "no-cache";
        add_header "Expires" "-1";
        add_header "X-Frame-Options" "DENY";
        add_header "X-XSS-Protection" "1; mode=block";
        add_header "X-Content-Type-Options" "nosniff";
        add_header "X-Download-Options" "noopen";
        add_header "X-Permitted-Cross-Domain-Policies" "none";

        proxy_set_header X-Real-Ip $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header Host $host;
        proxy_pass http://api_server;
        proxy_http_version 1.1;
    }

    # Next.js for local development
    location /_next/webpack-hmr {
        proxy_pass http://localhost:3000/_next/webpack-hmr;
        proxy_http_version 1.1;
        proxy_set_header "Upgrade" $http_upgrade;
        proxy_set_header "Connection" "upgrade";
    }

    # Websocket
    location ~ ^/ws/ {
        proxy_set_header "X-Real-Ip" $remote_addr;
        proxy_set_header "X-Forwarded-For" $remote_addr;
        proxy_set_header "Host" $host;
        proxy_set_header "Upgrade" $http_upgrade;
        proxy_set_header "Connection" "upgrade";
        proxy_read_timeout 1d;
        proxy_pass http://websocket_server;
        proxy_http_version 1.1;
    }

    location / {
        add_header "Cache-Control" "no-store, no-cache, must-revalidate, max-age=0";
        add_header "Pragma" "no-cache";
        add_header "Expires" "-1";
        add_header "X-Frame-Options" "DENY";
        add_header "X-XSS-Protection" "1; mode=block";
        add_header "X-Content-Type-Options" "nosniff";
        add_header "X-Download-Options" "noopen";
        add_header "X-Permitted-Cross-Domain-Policies" "master-only";
        proxy_set_header "X-Real-Ip" $remote_addr;
        proxy_set_header "X-Forwarded-For" $remote_addr;
        proxy_set_header "Host" $host;
        proxy_pass http://ssr_servers;
        proxy_http_version 1.1;
    }
}